#!/usr/bin/env python

"""
Author: Anthony G. Musco
Email:  amusco@cs.stonybrook.edu
Date:   04/01/2017

Simple script used to inspect the input data as well as the predicted output
densities generated by the trained CCNN.
"""


import sys, os, re
import skimage
from   skimage.viewer import ImageViewer
from   skimage.transform import rescale
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from   scipy.ndimage.filters import gaussian_filter 
import itertools
import tensorflow as tf

# Counting CNN
import ccnn

def main():
    """ 
    Quick script used to inspect the densities generated for the input images.
    """
    cfg = ccnn.util.loadConfig()
    regex = re.compile(r'\d+')
    with ccnn.model.CcnnModel(cfg) as model:
        train_file = os.path.join(cfg.IMG_SET_DIR, (cfg.IMG_SET_FMT % 'train'))
        for img_file in np.loadtxt(train_file, dtype='str'):
            # Read in the original image and dot image.
            img_file = os.path.join(cfg.IMG_DIR, img_file)
            dot_file = img_file.replace(cfg.IMG_EXT, cfg.DOT_EXT)
            img      = mpimg.imread(img_file)
            dot      = mpimg.imread(dot_file)
            # Generate the density map from the dot image.
            dens     = gaussian_filter(dot, cfg.DOT_RADIUS_SIGMA)
            # Display the overlay.
            if cfg.INSPECT_DATA_PREDICT:
                # Pass image through CCNN.
                count, pred_dens = model.predict(img)            
                true_count = regex.findall(img_file)[1]
                fig = plt.figure(figsize=[18, 6])
                ax1 = fig.add_subplot(1, 3, 1)
                ax2 = fig.add_subplot(1, 3, 2)
                ax3 = fig.add_subplot(1, 3, 3)
                ax1.set_title('Source Image')
                ax2.set_title('Ground Truth ({})'.format(true_count))
                ax3.set_title('Prediction ({:4.2f})'.format(count))
                ax1.imshow(img)
                ax1.set_yticklabels([])
                ax1.set_xticklabels([])
                ccnn.util.densityMapOverlay(img, dens, fig, ax2)
                ccnn.util.densityMapOverlay(img, pred_dens, fig, ax3)
            else:
                ccnn.util.densityMapOverlay(img, dens)
            plt.show()


if __name__ == "__main__":
    main()

